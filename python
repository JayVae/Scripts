1. Python 中的字符串不能被修改，它们是 immutable 的，如果需要一个不同的字符串，应当新建一个。


2. 由于不存在单独的“字符”类型，对字符串做索引操作将产生一个长度为 1 的字符串。 也就是说，对于一个非空字符串 s, s[0] == s[0:1]。

不存在可变的字符串类型，但是 str.join() 或 io.StringIO 可以被被用来根据多个片段高效率地构建字符串。

3. 和字符串（以及各种内置的 sequence 类型）一样，列表也支持索引和切片、拼接，与 immutable 的字符串不同, 列表是一个 mutable 类型，就是说，它自己的内容可以改变。
也可以嵌套列表。

4. 如果你只打印 range，会出现奇怪的结果:

>>>
>>> print(range(10))
range(0, 10)
range() 所返回的对象在许多方面表现得像一个列表，但实际上却并不是。此对象会在你迭代它时基于所希望的序列返回连续的项，但它没有真正生成列表，这样就能节省空间。

我们说这样的对象是 可迭代的 ，也就是说，适合作为函数和结构体的参数，这些函数和结构体期望在迭代结束之前可以从中获取连续的元素。
我们已经看到 for 语句就是这样一个迭代器。函数 list() 是另外一个；它从可迭代对象中创建列表。

5. 循环
当在字典中循环时，用 items() 方法可将关键字和对应的值同时取出

>>>
>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...
gallahad the pure
robin the brave
当在序列中循环时，用 enumerate() 函数可以将索引位置和其对应的值同时取出

>>>
>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)
...
0 tic
1 tac
2 toe
当同时在两个或更多序列中循环时，可以用 zip() 函数将其内元素一一匹配。

>>>
>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print('What is your {0}?  It is {1}.'.format(q, a))
...
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.


7. 赋值、浅拷贝、深拷贝
直接赋值,默认浅拷贝传递对象的引用而已,原始列表改变，被赋值的b也会做相同的改变
copy浅拷贝，没有拷贝子对象，所以原始数据改变，子对象会改变
deepcopy深拷贝，包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变

8.
我们看到列表和字符串有很多共同特性，例如索引和切片操作。他们是 序列 数据类型（参见 序列类型 --- list, tuple, range）中的两种。
随着 Python 语言的发展，其他的序列类型也会被加入其中。这里介绍另一种标准序列类型: 元组。

9. 数据类型
序列：字符串、列表、元组、range
字典
集合

10. 模块搜索路径
当一个名为 spam 的模块被导入的时候，解释器首先寻找具有该名称的内置模块。如果没有找到，然后解释器从 sys.path 变量给出的目录列表里寻找名为 spam.py 的文件。sys.path 初始有这些目录地址:

- 包含输入脚本的目录（或者未指定文件时的当前目录）。
- PYTHONPATH （一个包含目录名称的列表，它和shell变量 PATH 有一样的语法）。
- 取决于安装的默认设置
