1. Python 中的字符串不能被修改，它们是 immutable 的，如果需要一个不同的字符串，应当新建一个。


2. 由于不存在单独的“字符”类型，对字符串做索引操作将产生一个长度为 1 的字符串。 也就是说，对于一个非空字符串 s, s[0] == s[0:1]。

不存在可变的字符串类型，但是 str.join() 或 io.StringIO 可以被被用来根据多个片段高效率地构建字符串。

3. 和字符串（以及各种内置的 sequence 类型）一样，列表也支持索引和切片、拼接，与 immutable 的字符串不同, 列表是一个 mutable 类型，就是说，它自己的内容可以改变。
也可以嵌套列表。

4. 如果你只打印 range，会出现奇怪的结果:

>>>
>>> print(range(10))
range(0, 10)
range() 所返回的对象在许多方面表现得像一个列表，但实际上却并不是。此对象会在你迭代它时基于所希望的序列返回连续的项，但它没有真正生成列表，这样就能节省空间。

我们说这样的对象是 可迭代的 ，也就是说，适合作为函数和结构体的参数，这些函数和结构体期望在迭代结束之前可以从中获取连续的元素。
我们已经看到 for 语句就是这样一个迭代器。函数 list() 是另外一个；它从可迭代对象中创建列表。

5. 循环
当在字典中循环时，用 items() 方法可将关键字和对应的值同时取出

>>>
>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...
gallahad the pure
robin the brave
当在序列中循环时，用 enumerate() 函数可以将索引位置和其对应的值同时取出

>>>
>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)
...
0 tic
1 tac
2 toe
当同时在两个或更多序列中循环时，可以用 zip() 函数将其内元素一一匹配。

>>>
>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print('What is your {0}?  It is {1}.'.format(q, a))
...
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.


7. 赋值、浅拷贝、深拷贝
直接赋值,默认浅拷贝传递对象的引用而已,原始列表改变，被赋值的b也会做相同的改变
copy浅拷贝，没有拷贝子对象，所以原始数据改变，子对象会改变
deepcopy深拷贝，包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变

8.
我们看到列表和字符串有很多共同特性，例如索引和切片操作。他们是 序列 数据类型（参见 序列类型 --- list, tuple, range）中的两种。
随着 Python 语言的发展，其他的序列类型也会被加入其中。这里介绍另一种标准序列类型: 元组。

9. 数据类型
序列：字符串、列表、元组、range
字典
集合

10. 模块搜索路径
当一个名为 spam 的模块被导入的时候，解释器首先寻找具有该名称的内置模块。如果没有找到，然后解释器从 sys.path 变量给出的目录列表里寻找名为 spam.py 的文件。sys.path 初始有这些目录地址:

- 包含输入脚本的目录（或者未指定文件时的当前目录）。
- PYTHONPATH （一个包含目录名称的列表，它和shell变量 PATH 有一样的语法）。
- 取决于安装的默认设置

11. 类
（1）类的实例对象数据属性不需要声明；像局部变量一样，它们将在第一次被赋值时产生。以下counter在类声明中没有定义。
class MyClass:
    """A simple example class"""
    i = 12345

    def f(self):
        return 'hello world'

x = MyClass()

x.counter = 1
while x.counter < 10:
    x.counter = x.counter * 2
print(x.counter)
del x.counter
（2）方法对象
立即调用一个方法并不是必须的: x.f 是一个方法对象，它可以被保存起来以后再调用。 例如:

xf = x.f
while True:
    print(xf())
将继续打印 hello world，直到结束。
（3）类变量和实例变量
一般来说，实例变量用于每个实例的唯一数据，而类变量用于类的所有实例共享的属性和方法。但是共享属性是可以在自己对象中修改的，并且隔离，除了下一行的情况，如存在地址引用。
正如 名称和对象 中已讨论过的，共享数据可能在涉及 mutable 对象例如列表和字典的时候导致令人惊讶的结果。 例如以下代码中的 tricks 列表不应该被用作类变量，因为所有的 Dog 实例将只共享一个单独的列表。

class Dog:

    kind = 'canine'         # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance
        
 使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：
总是先到实例对象中查找属性，再到类属性中查找属性；
属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。

类对象Dog与实例对象dog均有属性country，按照规则，dog.country会引用到实例对象的属性；但实例对象dog没有属性kind，按照规则会引用类对象的属性。

示例2：

class Dog:

	kind = 'canine'
	country = 'China'

	def __init__(self, name, age, country):
		self.name = name
		self.age = age
		self.country = country

dog = Dog('Lily', 3, 'Britain')
print(dog.name, dog.age, dog.kind, dog.country) # Lily 3 canine Britain
print(dog.__dict__) # {'name': 'Lily', 'age': 3, 'country': 'Britain'}

dog.kind = 'feline'
print(dog.name, dog.age, dog.kind, dog.country) # Lily 3 feline Britain
print(dog.__dict__) 
print(Dog.kind) # canine 没有改变类属性的指向
# {'name': 'Lily', 'age': 3, 'country': 'Britain', 'kind': 'feline'}
使用属性绑定语句dog.kind = 'feline'，按照规则，为实例对象dog增加了属性kind，后面使用dog.kind引用到实例对象的属性。

这里不要以为会改变类属性Dog.kind的指向，实则是为实例对象新增属性，可以使用查看__dict__的方式证明这一点。

示例3，可变类属性引用：

class Dog:
	
	tricks = []

	def __init__(self, name):
		self.name = name

	def add_trick(self, trick):
		self.tricks.append(trick)

d = Dog('Fido')
e = Dog('Buddy')
d.add_trick('roll over')
e.add_trick('play dead')
print(d.tricks) # ['roll over', 'play dead']
语句self.tricks.append(trick)并不是属性绑定语句，因此还是在类属性上修改可变对象。【属性绑定语句是objname.attr = attr_value】
（4）python是动态语言，可以运行时增加、删除属性
